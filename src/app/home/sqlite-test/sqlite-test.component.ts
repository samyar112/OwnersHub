import { Component, OnInit } from '@angular/core';
import { SqliteService } from '../../sqlite.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Owner } from '../../model/owner'; // Import the Owner model

@Component({
  selector: 'app-sqlite-test',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './sqlite-test.component.html',
  styleUrls: ['./sqlite-test.component.css']
})
export class SqliteTestComponent implements OnInit {
  // Initialize form data with the 'id' as 0 for new records (hidden from UI)
  data: Owner = {
    id: 0,           // Initially, id is 0 for new records, but it won't be displayed
    accountId: 0,
    ownerName: '',
    contactName: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    state: '',
    zip: ''
  };

  owners: Owner[] = []; // List of owners from DB

  constructor(private sqliteService: SqliteService) {}

  ngOnInit() {
    this.createTable();
    this.loadOwners(); // Load owners when the component is initialized
  }

  // Create the table if not exists
  createTable() {
    this.sqliteService.createTable().then((message: any) => {
      console.log(message);
    }).catch((error: any) => {
      console.error('Error creating table:', error);
    });
  }

  // Add new owner data
  addData() {
    // Ensure all required fields are filled
    if (
      !this.data.ownerName || 
      !this.data.contactName || 
      !this.data.email || 
      !this.data.phone || 
      !this.data.address || 
      !this.data.city || 
      !this.data.state || 
      !this.data.zip
    ) {
      alert('Please fill in all fields.');
      return;
    }

    // Create a new owner object without the 'id' as it's auto-generated by DB
    const dataToSend = {
      ...this.data,
      id: undefined,  // Exclude id when adding new data
    };

    this.sqliteService.addData(dataToSend).then((message: any) => {
      console.log(message);
      this.loadOwners();  // Reload owners after adding data
      this.resetForm();  // Reset the form after adding data
    }).catch((error: any) => {
      console.error('Error adding data:', error);
    });
  }

  // Edit an owner's details
  editData() {
    if (this.data.id === 0 || this.data.id === undefined) {
      alert('Please select an owner to edit.');
      return;
    }

    this.sqliteService.editData({
      ...this.data,
      id: this.data.id ?? 0  // Ensure id is a number, defaults to 0 if undefined
    }).then((message: any) => {
      console.log(message);
      this.loadOwners();  // Reload owners after editing data
      this.resetForm();   // Reset the form after editing
    }).catch((error: any) => {
      console.error('Error editing data:', error);
    });
  }

  // Delete an owner
  deleteData(id: number) {
    if (!id) {
      alert('Invalid owner ID');
      return;
    }

    if (confirm('Are you sure you want to delete this owner?')) {
      this.sqliteService.deleteData(id).then((message: any) => {
        console.log(message);
        this.loadOwners();  // Reload owners after deleting data
      }).catch((error: any) => {
        console.error('Error deleting data:', error);
      });
    }
  }

  // Load owners from the database
  loadOwners() {
    this.sqliteService.getAllData().then((owners: Owner[]) => {
      this.owners = owners;
    }).catch((error: any) => {
      console.error('Error loading owners:', error);
    });
  }

  // Reset the form to its initial state
  resetForm() {
    this.data = { 
      id: 0,  // Reset id to 0 (for new records)
      accountId: 0,  // Ensure accountId is reset as well
      ownerName: '',
      contactName: '',
      email: '',
      phone: '',
      address: '',
      city: '',
      state: '',
      zip: ''
    };
  }

  // Fill the form for editing (called when an owner is selected from the table)
  editOwner(owner: Owner) {
    this.data = { ...owner };  // Pre-fill the form with owner data for editing
  }
}
